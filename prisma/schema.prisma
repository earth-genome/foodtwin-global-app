generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Area {
  id        String                                       @id
  name      String
  flowsFrom Flow[]                                       @relation("FromArea")
  flowsTo   Flow[]                                       @relation("ToArea")
  centroid  Unsupported("geometry(Point, 3857)")?
  limits    Unsupported("geometry(MultiPolygon, 3857)")?

  @@index([centroid], name: "centroid_idx", type: Gist)
  @@index([limits], name: "limits_idx", type: Gist)
}

enum NodeType {
  INLAND_PORT
  MARITIME
  PORT
  RAIL_STATION
  ADMIN
}

model Node {
  id               String                               @id
  name             String?
  type             NodeType
  geom             Unsupported("geometry(Point, 3857)")
  flowSegmentsFrom Edge[]                               @relation("FromNode")
  flowSegmentsTo   Edge[]                               @relation("ToNode")

  @@index([id])
}

enum EdgeType {
  LAND
  MARITIME
}

model Edge {
  id           String                                         @id
  distance     Float
  type         EdgeType
  geom         Unsupported("geometry(MultiLineString, 3857)")
  fromNode     Node                                           @relation("FromNode", fields: [fromNodeId], references: [id])
  fromNodeId   String
  toNode       Node                                           @relation("ToNode", fields: [toNodeId], references: [id])
  toNodeId     String
  flowSegments FlowSegmentEdges[]

  @@index([geom], name: "geom_idx", type: Gist)
  @@index([fromNodeId])
  @@index([toNodeId])
  @@index([fromNodeId, toNodeId])
}

model Flow {
  id          String        @id
  fromArea    Area          @relation("FromArea", fields: [fromAreaId], references: [id])
  fromAreaId  String
  toArea      Area          @relation("ToArea", fields: [toAreaId], references: [id])
  toAreaId    String
  foodGroupId Int
  foodGroup   FoodGroup     @relation(fields: [foodGroupId], references: [id])
  value       Float
  FlowSegment FlowSegment[]
}

model FlowSegment {
  id     String             @id
  mode   String
  flowId String
  flow   Flow               @relation(fields: [flowId], references: [id])
  edges  FlowSegmentEdges[]

  order Int

  @@index([flowId, order], name: "flow_segment_composite_idx")
}

model FlowSegmentEdges {
  id            Int         @id @default(autoincrement())
  edgeId        String
  edge          Edge        @relation(fields: [edgeId], references: [id])
  flowSegmentId String
  flowSegment   FlowSegment @relation(fields: [flowSegmentId], references: [id])
  order         Int

  @@index([flowSegmentId])
  @@index([edgeId])
}

model FoodGroup {
  id       Int         @id @default(autoincrement())
  name     String
  slug     String?
  parentId Int?
  parent   FoodGroup?  @relation("ParentChild", fields: [parentId], references: [id])
  children FoodGroup[] @relation("ParentChild")
  level    Int         @default(0)
  Flow     Flow[]

  @@index([parentId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
